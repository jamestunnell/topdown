// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/topdown/resource (interfaces: Type)

// Package mock_resource is a generated GoMock package.
package mock_resource

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resource "github.com/jamestunnell/topdown/resource"
)

// MockType is a mock of Type interface.
type MockType struct {
	ctrl     *gomock.Controller
	recorder *MockTypeMockRecorder
}

// MockTypeMockRecorder is the mock recorder for MockType.
type MockTypeMockRecorder struct {
	mock *MockType
}

// NewMockType creates a new mock instance.
func NewMockType(ctrl *gomock.Controller) *MockType {
	mock := &MockType{ctrl: ctrl}
	mock.recorder = &MockTypeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockType) EXPECT() *MockTypeMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockType) Load(arg0 string) (resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockTypeMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockType)(nil).Load), arg0)
}

// Name mocks base method.
func (m *MockType) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockTypeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockType)(nil).Name))
}

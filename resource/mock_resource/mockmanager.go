// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/topdown/resource (interfaces: Manager)

// Package mock_resource is a generated GoMock package.
package mock_resource

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	resource "github.com/jamestunnell/topdown/resource"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockManager) Add(arg0 string, arg1 resource.Resource) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0, arg1)
}

// Add indicates an expected call of Add.
func (mr *MockManagerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockManager)(nil).Add), arg0, arg1)
}

// Clear mocks base method.
func (m *MockManager) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockManagerMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockManager)(nil).Clear))
}

// FilePartialPaths mocks base method.
func (m *MockManager) FilePartialPaths(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilePartialPaths", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// FilePartialPaths indicates an expected call of FilePartialPaths.
func (mr *MockManagerMockRecorder) FilePartialPaths(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilePartialPaths", reflect.TypeOf((*MockManager)(nil).FilePartialPaths), arg0)
}

// Get mocks base method.
func (m *MockManager) Get(arg0 string) (resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManager)(nil).Get), arg0)
}

// Initialize mocks base method.
func (m *MockManager) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockManagerMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockManager)(nil).Initialize))
}

// TypeNames mocks base method.
func (m *MockManager) TypeNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TypeNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// TypeNames indicates an expected call of TypeNames.
func (mr *MockManagerMockRecorder) TypeNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TypeNames", reflect.TypeOf((*MockManager)(nil).TypeNames))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/topdown/drawing (interfaces: WorldDrawable,OverlayDrawable)

// Package mock_drawing is a generated GoMock package.
package mock_drawing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ebiten "github.com/hajimehoshi/ebiten/v2"
	topdown "github.com/jamestunnell/topdown"
)

// MockWorldDrawable is a mock of WorldDrawable interface.
type MockWorldDrawable struct {
	ctrl     *gomock.Controller
	recorder *MockWorldDrawableMockRecorder
}

// MockWorldDrawableMockRecorder is the mock recorder for MockWorldDrawable.
type MockWorldDrawableMockRecorder struct {
	mock *MockWorldDrawable
}

// NewMockWorldDrawable creates a new mock instance.
func NewMockWorldDrawable(ctrl *gomock.Controller) *MockWorldDrawable {
	mock := &MockWorldDrawable{ctrl: ctrl}
	mock.recorder = &MockWorldDrawableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorldDrawable) EXPECT() *MockWorldDrawableMockRecorder {
	return m.recorder
}

// WorldDraw mocks base method.
func (m *MockWorldDrawable) WorldDraw(arg0 *ebiten.Image, arg1 topdown.Rectangle[float64]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WorldDraw", arg0, arg1)
}

// WorldDraw indicates an expected call of WorldDraw.
func (mr *MockWorldDrawableMockRecorder) WorldDraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorldDraw", reflect.TypeOf((*MockWorldDrawable)(nil).WorldDraw), arg0, arg1)
}

// WorldLayer mocks base method.
func (m *MockWorldDrawable) WorldLayer() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorldLayer")
	ret0, _ := ret[0].(int)
	return ret0
}

// WorldLayer indicates an expected call of WorldLayer.
func (mr *MockWorldDrawableMockRecorder) WorldLayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorldLayer", reflect.TypeOf((*MockWorldDrawable)(nil).WorldLayer))
}

// MockOverlayDrawable is a mock of OverlayDrawable interface.
type MockOverlayDrawable struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayDrawableMockRecorder
}

// MockOverlayDrawableMockRecorder is the mock recorder for MockOverlayDrawable.
type MockOverlayDrawableMockRecorder struct {
	mock *MockOverlayDrawable
}

// NewMockOverlayDrawable creates a new mock instance.
func NewMockOverlayDrawable(ctrl *gomock.Controller) *MockOverlayDrawable {
	mock := &MockOverlayDrawable{ctrl: ctrl}
	mock.recorder = &MockOverlayDrawableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayDrawable) EXPECT() *MockOverlayDrawableMockRecorder {
	return m.recorder
}

// OverlayDraw mocks base method.
func (m *MockOverlayDrawable) OverlayDraw(arg0 *ebiten.Image) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OverlayDraw", arg0)
}

// OverlayDraw indicates an expected call of OverlayDraw.
func (mr *MockOverlayDrawableMockRecorder) OverlayDraw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverlayDraw", reflect.TypeOf((*MockOverlayDrawable)(nil).OverlayDraw), arg0)
}

// OverlayLayer mocks base method.
func (m *MockOverlayDrawable) OverlayLayer() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverlayLayer")
	ret0, _ := ret[0].(int)
	return ret0
}

// OverlayLayer indicates an expected call of OverlayLayer.
func (mr *MockOverlayDrawableMockRecorder) OverlayLayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverlayLayer", reflect.TypeOf((*MockOverlayDrawable)(nil).OverlayLayer))
}

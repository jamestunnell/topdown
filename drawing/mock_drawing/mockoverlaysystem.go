// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/topdown/drawing (interfaces: OverlaySystem)

// Package mock_drawing is a generated GoMock package.
package mock_drawing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ebiten "github.com/hajimehoshi/ebiten/v2"
)

// MockOverlaySystem is a mock of OverlaySystem interface.
type MockOverlaySystem struct {
	ctrl     *gomock.Controller
	recorder *MockOverlaySystemMockRecorder
}

// MockOverlaySystemMockRecorder is the mock recorder for MockOverlaySystem.
type MockOverlaySystemMockRecorder struct {
	mock *MockOverlaySystem
}

// NewMockOverlaySystem creates a new mock instance.
func NewMockOverlaySystem(ctrl *gomock.Controller) *MockOverlaySystem {
	mock := &MockOverlaySystem{ctrl: ctrl}
	mock.recorder = &MockOverlaySystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlaySystem) EXPECT() *MockOverlaySystemMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockOverlaySystem) Add(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0, arg1)
}

// Add indicates an expected call of Add.
func (mr *MockOverlaySystemMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOverlaySystem)(nil).Add), arg0, arg1)
}

// Clear mocks base method.
func (m *MockOverlaySystem) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockOverlaySystemMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockOverlaySystem)(nil).Clear))
}

// DrawOverlay mocks base method.
func (m *MockOverlaySystem) DrawOverlay() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DrawOverlay")
}

// DrawOverlay indicates an expected call of DrawOverlay.
func (mr *MockOverlaySystemMockRecorder) DrawOverlay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DrawOverlay", reflect.TypeOf((*MockOverlaySystem)(nil).DrawOverlay))
}

// Remove mocks base method.
func (m *MockOverlaySystem) Remove(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0)
}

// Remove indicates an expected call of Remove.
func (mr *MockOverlaySystemMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOverlaySystem)(nil).Remove), arg0)
}

// Resize mocks base method.
func (m *MockOverlaySystem) Resize(arg0, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resize", arg0, arg1)
}

// Resize indicates an expected call of Resize.
func (mr *MockOverlaySystemMockRecorder) Resize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockOverlaySystem)(nil).Resize), arg0, arg1)
}

// Surface mocks base method.
func (m *MockOverlaySystem) Surface() *ebiten.Image {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Surface")
	ret0, _ := ret[0].(*ebiten.Image)
	return ret0
}

// Surface indicates an expected call of Surface.
func (mr *MockOverlaySystemMockRecorder) Surface() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Surface", reflect.TypeOf((*MockOverlaySystem)(nil).Surface))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/topdown/fileindex (interfaces: FileIndex)

// Package mock_fileindex is a generated GoMock package.
package mock_fileindex

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	fileindex "github.com/jamestunnell/topdown/fileindex"
)

// MockFileIndex is a mock of FileIndex interface.
type MockFileIndex struct {
	ctrl     *gomock.Controller
	recorder *MockFileIndexMockRecorder
}

// MockFileIndexMockRecorder is the mock recorder for MockFileIndex.
type MockFileIndexMockRecorder struct {
	mock *MockFileIndex
}

// NewMockFileIndex creates a new mock instance.
func NewMockFileIndex(ctrl *gomock.Controller) *MockFileIndex {
	mock := &MockFileIndex{ctrl: ctrl}
	mock.recorder = &MockFileIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileIndex) EXPECT() *MockFileIndexMockRecorder {
	return m.recorder
}

// LastScanComplete mocks base method.
func (m *MockFileIndex) LastScanComplete() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastScanComplete")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LastScanComplete indicates an expected call of LastScanComplete.
func (mr *MockFileIndexMockRecorder) LastScanComplete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastScanComplete", reflect.TypeOf((*MockFileIndex)(nil).LastScanComplete))
}

// PathDirs mocks base method.
func (m *MockFileIndex) PathDirs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathDirs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// PathDirs indicates an expected call of PathDirs.
func (mr *MockFileIndexMockRecorder) PathDirs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathDirs", reflect.TypeOf((*MockFileIndex)(nil).PathDirs))
}

// PathExts mocks base method.
func (m *MockFileIndex) PathExts() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// PathExts indicates an expected call of PathExts.
func (mr *MockFileIndexMockRecorder) PathExts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExts", reflect.TypeOf((*MockFileIndex)(nil).PathExts))
}

// Paths mocks base method.
func (m *MockFileIndex) Paths(arg0 ...fileindex.FileFilterOpt) []string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Paths", varargs...)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Paths indicates an expected call of Paths.
func (mr *MockFileIndexMockRecorder) Paths(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paths", reflect.TypeOf((*MockFileIndex)(nil).Paths), arg0...)
}

// RootDir mocks base method.
func (m *MockFileIndex) RootDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// RootDir indicates an expected call of RootDir.
func (mr *MockFileIndexMockRecorder) RootDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootDir", reflect.TypeOf((*MockFileIndex)(nil).RootDir))
}

// Scan mocks base method.
func (m *MockFileIndex) Scan() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan")
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockFileIndexMockRecorder) Scan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockFileIndex)(nil).Scan))
}

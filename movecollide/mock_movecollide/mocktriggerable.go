// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/topdown/movecollide (interfaces: Triggerable)

// Package mock_movecollide is a generated GoMock package.
package mock_movecollide

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cirno "github.com/zergon321/cirno"
)

// MockTriggerable is a mock of Triggerable interface.
type MockTriggerable struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerableMockRecorder
}

// MockTriggerableMockRecorder is the mock recorder for MockTriggerable.
type MockTriggerableMockRecorder struct {
	mock *MockTriggerable
}

// NewMockTriggerable creates a new mock instance.
func NewMockTriggerable(ctrl *gomock.Controller) *MockTriggerable {
	mock := &MockTriggerable{ctrl: ctrl}
	mock.recorder = &MockTriggerableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerable) EXPECT() *MockTriggerableMockRecorder {
	return m.recorder
}

// TriggerEnter mocks base method.
func (m *MockTriggerable) TriggerEnter(arg0 cirno.Shape) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TriggerEnter", arg0)
}

// TriggerEnter indicates an expected call of TriggerEnter.
func (mr *MockTriggerableMockRecorder) TriggerEnter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerEnter", reflect.TypeOf((*MockTriggerable)(nil).TriggerEnter), arg0)
}

// TriggerExit mocks base method.
func (m *MockTriggerable) TriggerExit(arg0 cirno.Shape) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TriggerExit", arg0)
}

// TriggerExit indicates an expected call of TriggerExit.
func (mr *MockTriggerableMockRecorder) TriggerExit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerExit", reflect.TypeOf((*MockTriggerable)(nil).TriggerExit), arg0)
}

// TriggerRemain mocks base method.
func (m *MockTriggerable) TriggerRemain(arg0 cirno.Shape) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TriggerRemain", arg0)
}

// TriggerRemain indicates an expected call of TriggerRemain.
func (mr *MockTriggerableMockRecorder) TriggerRemain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerRemain", reflect.TypeOf((*MockTriggerable)(nil).TriggerRemain), arg0)
}

// TriggerShape mocks base method.
func (m *MockTriggerable) TriggerShape() cirno.Shape {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerShape")
	ret0, _ := ret[0].(cirno.Shape)
	return ret0
}

// TriggerShape indicates an expected call of TriggerShape.
func (mr *MockTriggerableMockRecorder) TriggerShape() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerShape", reflect.TypeOf((*MockTriggerable)(nil).TriggerShape))
}

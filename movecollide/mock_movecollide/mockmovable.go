// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/topdown/movecollide (interfaces: Movable)

// Package mock_movecollide is a generated GoMock package.
package mock_movecollide

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	topdown "github.com/jamestunnell/topdown"
)

// MockMovable is a mock of Movable interface.
type MockMovable struct {
	ctrl     *gomock.Controller
	recorder *MockMovableMockRecorder
}

// MockMovableMockRecorder is the mock recorder for MockMovable.
type MockMovableMockRecorder struct {
	mock *MockMovable
}

// NewMockMovable creates a new mock instance.
func NewMockMovable(ctrl *gomock.Controller) *MockMovable {
	mock := &MockMovable{ctrl: ctrl}
	mock.recorder = &MockMovableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovable) EXPECT() *MockMovableMockRecorder {
	return m.recorder
}

// Move mocks base method.
func (m *MockMovable) Move(arg0 topdown.Vector) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Move", arg0)
}

// Move indicates an expected call of Move.
func (mr *MockMovableMockRecorder) Move(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockMovable)(nil).Move), arg0)
}

// PlanMovement mocks base method.
func (m *MockMovable) PlanMovement(arg0 float64) topdown.Vector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlanMovement", arg0)
	ret0, _ := ret[0].(topdown.Vector)
	return ret0
}

// PlanMovement indicates an expected call of PlanMovement.
func (mr *MockMovableMockRecorder) PlanMovement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlanMovement", reflect.TypeOf((*MockMovable)(nil).PlanMovement), arg0)
}

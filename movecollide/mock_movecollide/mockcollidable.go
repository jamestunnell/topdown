// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/topdown/movecollide (interfaces: Collidable)

// Package mock_movecollide is a generated GoMock package.
package mock_movecollide

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cirno "github.com/zergon321/cirno"
)

// MockCollidable is a mock of Collidable interface.
type MockCollidable struct {
	ctrl     *gomock.Controller
	recorder *MockCollidableMockRecorder
}

// MockCollidableMockRecorder is the mock recorder for MockCollidable.
type MockCollidableMockRecorder struct {
	mock *MockCollidable
}

// NewMockCollidable creates a new mock instance.
func NewMockCollidable(ctrl *gomock.Controller) *MockCollidable {
	mock := &MockCollidable{ctrl: ctrl}
	mock.recorder = &MockCollidableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollidable) EXPECT() *MockCollidableMockRecorder {
	return m.recorder
}

// ColliderShape mocks base method.
func (m *MockCollidable) ColliderShape() cirno.Shape {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColliderShape")
	ret0, _ := ret[0].(cirno.Shape)
	return ret0
}

// ColliderShape indicates an expected call of ColliderShape.
func (mr *MockCollidableMockRecorder) ColliderShape() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColliderShape", reflect.TypeOf((*MockCollidable)(nil).ColliderShape))
}

// ResolveCollision mocks base method.
func (m *MockCollidable) ResolveCollision(arg0 cirno.Vector, arg1 cirno.Shapes) cirno.Vector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCollision", arg0, arg1)
	ret0, _ := ret[0].(cirno.Vector)
	return ret0
}

// ResolveCollision indicates an expected call of ResolveCollision.
func (mr *MockCollidableMockRecorder) ResolveCollision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCollision", reflect.TypeOf((*MockCollidable)(nil).ResolveCollision), arg0, arg1)
}

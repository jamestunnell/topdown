// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/topdown/engine (interfaces: Engine)

// Package mock_engine is a generated GoMock package.
package mock_engine

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ebiten "github.com/hajimehoshi/ebiten/v2"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Draw mocks base method.
func (m *MockEngine) Draw(arg0 *ebiten.Image) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Draw", arg0)
}

// Draw indicates an expected call of Draw.
func (mr *MockEngineMockRecorder) Draw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Draw", reflect.TypeOf((*MockEngine)(nil).Draw), arg0)
}

// Initialize mocks base method.
func (m *MockEngine) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockEngineMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockEngine)(nil).Initialize))
}

// Layout mocks base method.
func (m *MockEngine) Layout(arg0, arg1 int) (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Layout", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Layout indicates an expected call of Layout.
func (mr *MockEngineMockRecorder) Layout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Layout", reflect.TypeOf((*MockEngine)(nil).Layout), arg0, arg1)
}

// Run mocks base method.
func (m *MockEngine) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockEngineMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockEngine)(nil).Run))
}

// Update mocks base method.
func (m *MockEngine) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEngineMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEngine)(nil).Update))
}
